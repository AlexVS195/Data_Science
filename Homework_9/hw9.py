# -*- coding: utf-8 -*-
"""Hw9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x6OaL0mtjJ-_3dJkVEwhVbmT0Iy7Ai6e
"""

!pip install keras-tuner

import tensorflow as tf
from tensorflow.keras.datasets import fashion_mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Dropout
from tensorflow.keras.optimizers import Adam, RMSprop, SGD
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping, LearningRateScheduler

# Завантажуємо датасет Fashion MNIST
(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()

# Нормалізуємо дані
x_train = x_train / 255.0
x_test = x_test / 255.0

# Перетворюємо мітки в категоріальний формат
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# Створюємо модель
model = Sequential([
    Flatten(input_shape=(28, 28)),  # Вхідний шар
    Dense(256, activation='relu'),  # Прихований шар з 256 нейронами та функцією активації ReLU
    Dropout(0.1),  # Техніка регуляризації Dropout
    Dense(128, activation='relu'),  # Прихований шар з 128 нейронами
    Dropout(0.1),  # Техніка регуляризації Dropout
    Dense(10, activation='softmax')  # Вихідний шар з 10 нейронами та функцією активації Softmax
])

# Компілюємо модель
# model.compile(optimizer=RMSprop(learning_rate=0.001),
#               loss='categorical_crossentropy',
#               metrics=['accuracy'])

model.compile(optimizer=Adam(learning_rate=0.001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# model.compile(optimizer=SGD(learning_rate=0.001, momentum=0.9),
#               loss='categorical_crossentropy',
#               metrics=['accuracy'])

# Рання зупинка
early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

# Планувальник швидкості навчання
def lr_scheduler(epoch, lr):
    if epoch > 10:
        return lr * 0.1
    return lr

lr_schedule = LearningRateScheduler(lr_scheduler)

# Навчаємо модель
history = model.fit(x_train, y_train,
                    batch_size=64,
                    epochs=30,
                    validation_data=(x_test, y_test),
                    callbacks=[early_stopping, lr_schedule])

# Оцінюємо точність моделі на тестових даних
test_loss, test_acc = model.evaluate(x_test, y_test)
print(f'Точність на тестових даних: {test_acc}')