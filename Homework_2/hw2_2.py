# -*- coding: utf-8 -*-
"""Hw2.2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wo27XptKOkwo9dr1nz5KPmJ0jBPq8JMq
"""

# Прочитайте файл 2017_jun_final.csv за допомогою методу read_csv
import pandas as pd
from google.colab import files

# URL для завантаження CSV з Google Sheets
url = 'https://docs.google.com/spreadsheets/d/1bclX5PbqE8zR1-wOSM3ZTFa53sIC7RXqwty7Abmw9yQ/export?format=csv'

# Прочитати файл CSV
df = pd.read_csv(url)

# Прочитайте отриману таблицю, використовуючи метод head
print(df.head())

# Визначте розмір таблиці за допомогою методу shape
print(df.shape)

# Визначте типи всіх стовпців за допомогою dataframe.dtypes
print(df.dtypes)

# Порахуйте, яка частка пропусків міститься в кожній колонці (використовуйте методи isnull та sum)
missing_percentage = df.isnull().sum() / len(df) * 100
print(missing_percentage)

# Видаліть усі стовпці з пропусками, крім стовпця "Мова програмування"
columns_to_keep = ['Мова програмування']
df_no_missing = df.loc[:, df.columns.isin(columns_to_keep) | df.notna().all()]

# Знову порахуйте, яка частка пропусків міститься в кожній колонці і переконайтеся, що залишився тільки стовпець "Мова.програмування"
missing_percentage = df_no_missing.isnull().sum() / len(df_no_missing) * 100
print(missing_percentage)

# Видалити усі рядки у вихідній таблиці за допомогою методу dropna
df_cleaned = df_no_missing.dropna()

# Визначити новий розмір таблиці за допомогою методу shape
print(df_cleaned.shape)

# Створити нову таблицю python_data, в якій будуть тільки рядки зі спеціалістами, які вказали мову програмування Python
python_data = df_cleaned[df_cleaned['Мова програмування'] == 'Python']

# Визначити розмір таблиці python_data за допомогою методу shape
print(python_data.shape)

# Використовуючи метод groupby, виконати групування за стовпчиком "Посада"
grouped = python_data.groupby('Посада')

# Створіть новий DataFrame, де для згрупованих даних за стовпчиком "Посада", виконайте агрегацію даних за допомогою методу agg і знайдіть мінімальне та максимальне значення у стовпчику "Зарплата.в.місяць"
salary_stats = grouped['Зарплата на місяць'].agg(['min', 'max']).reset_index()
print(salary_stats)

# Створіть функцію fill_avg_salary, яка повертатиме середнє значення заробітної плати на місяць. Використовуйте її для методу apply та створіть новий стовпчик "avg"
def fill_avg_salary(row):
    return (row['min'] + row['max']) / 2
salary_stats['avg'] = salary_stats.apply(fill_avg_salary, axis=1)

# Створіть описову статистику за допомогою методу describe для нового стовпчика.
print(salary_stats['avg'].describe())

# Збережіть отриману таблицю в CSV файл
salary_stats.to_csv('python_salary_stats.csv', index=False)

# Завантажити файл на локальний комп'ютер
files.download('python_salary_stats.csv')

# Гістограма розподілу зарплати на місяць
plt.figure(figsize=(10, 6))
plt.hist(df['Зарплата на місяць'], bins=20, color='skyblue', edgecolor='black')
plt.title('Розподіл зарплати на місяць')
plt.xlabel('Зарплата')
plt.ylabel('Частота')
plt.grid(True)
plt.show()

# Графік кількості респондентів за кожною спеціалізацією
plt.figure(figsize=(10, 6))
df['Спеціалізація'].value_counts().plot(kind='bar', color='orange')
plt.title('Кількість респондентів за спеціалізацією')
plt.xlabel('Спеціалізація')
plt.ylabel('Кількість респондентів')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.show()

# Кругова діаграма для розподілу розміру компаній
plt.figure(figsize=(8, 8))
df['Розмір компанії'].value_counts().plot(kind='pie', autopct='%1.1f%%', startangle=140)
plt.title('Розподіл розміру компаній')
plt.axis('equal')
plt.tight_layout()
plt.show()

# Стовпчикова діаграма розподілу рівня англійської мови серед респондентів
plt.figure(figsize=(10, 6))
df['Рівень англійської'].value_counts().plot(kind='bar', color='green')
plt.title('Розподіл рівня англійської мови')
plt.xlabel('Рівень англійської')
plt.ylabel('Кількість респондентів')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.show()