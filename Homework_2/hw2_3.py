# -*- coding: utf-8 -*-
"""Hw2.3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hBU2t-A39K4QdoWEw6fLBWtJIvxmW2Oy
"""

import pandas as pd
from google.colab import files

# Завантажити файл
uploaded = files.upload()

# Прочитайте csv файл (використовуйте функцію read_csv)
file_path = list(uploaded.keys())[0]
df = pd.read_csv(file_path)

# Виведіть перші п'ять рядків (використовується функція head)
print(df.head())

# Виведіть розміри датасету (використовуйте атрибут shape)
print(df.shape)

# Перевірити наявність дублікатів у всьому датасеті
columns_to_check = ['Name', 'Author']
duplicates_subset = df.duplicated(subset=columns_to_check)
num_duplicates_subset = duplicates_subset.sum()

# Відкинути дублікати та зберегти тільки унікальні рядки
unique_df = df.drop_duplicates()

# Вивести кількість унікальних книг
num_unique_books = unique_df.shape[0] - num_duplicates_subset
print(f"Про скільки книг зберігає дані датасет? {num_unique_books}")

df.columns = ['name', 'author', 'user_rating', 'reviews', 'price', 'year', 'genre']

# Перевірте, чи у всіх рядків вистачає даних: виведіть кількість пропусків (na) у кожному зі стовпців (використовуйте функції isna та sum)
missing_values = df.isna().sum()
any_missing = missing_values.any()
print("Кількість пропусків у кожному стовпці:")
print(missing_values)

# Відповідь: Чи є в якихось змінних пропуски? (Так / ні)
print("Чи є в якихось змінних пропуски? (Так / ні):", "Так" if any_missing else "Ні")

# Перевірте, які є унікальні значення в колонці genre (використовуйте функцію unique)
unique_genres = df['genre'].unique()

# Відповідь: Які є унікальні жанри?
print("Унікальні жанри:", unique_genres)

import matplotlib.pyplot as plt

# Тепер подивіться на розподіл цін: побудуйте діаграму (використовуйте kind='hist')
df['price'].plot(kind='hist', bins=20, figsize=(10, 6))
plt.title('Розподіл цін')
plt.xlabel('Ціна')
plt.ylabel('Частота')
plt.show()

# Визначте, яка ціна у нас максимальна, мінімальна, середня, медіанна (використовуйте функції max, min, mean, median)
max_price = df['price'].max()
min_price = df['price'].min()
mean_price = df['price'].mean()
median_price = df['price'].median()

# Відповідь: Максимальна ціна?
print("Максимальна ціна:", max_price)

# Відповідь: Мінімальна ціна?
print("Мінімальна ціна:", min_price)

# Відповідь: Середня ціна?
print("Середня ціна:", mean_price)

# Відповідь: Медіанна ціна?
print("Медіанна ціна:", median_price)

# Відповідь: Який рейтинг у датасеті найвищий?
max_rating = df['user_rating'].max()
print("Найвищий рейтинг у датасеті:", max_rating)

# Відповідь: Скільки книг мають такий рейтинг?
num_books_with_max_rating = (df['user_rating'] == max_rating).sum()
print("Кількість книг з таким рейтингом:", num_books_with_max_rating)

# Відповідь: Яка книга має найбільше відгуків?
max_reviews_index = df['reviews'].idxmax()
book_with_max_reviews = df.loc[max_reviews_index]
print("Яка книга має найбільше відгуків?")
print(book_with_max_reviews)

# Відповідь: З тих книг, що потрапили до Топ-50 у 2015 році, яка книга найдорожча (можна використати проміжний датафрейм)?
# Проміжний датафрейм для книг, що потрапили до Топ-50 у 2015 році
top_50_2015 = df[df['year'] == 2015]

# Індекс рядка з найдорожчою книгою серед тих, що потрапили до Топ-50 у 2015 році
max_price_index = top_50_2015['price'].idxmax()

# Назва найдорожчої книги
most_expensive_book_name_2015 = top_50_2015.loc[max_price_index, 'name']

print("З тих книг, що потрапили до Топ-50 у 2015 році, яка книга найдорожча? Відповідь:", most_expensive_book_name_2015)

# Відповідь: Скільки книг жанру Fiction потрапили до Топ-50 у 2010 році (використовуйте &)?
num_fiction_books_2010 = ((df['genre'] == 'Fiction') & (df['year'] == 2010)).sum()
print("Кількість книг жанру Fiction, що потрапили до Топ-50 у 2010 році:", num_fiction_books_2010)

# Відповідь: Скільки книг з рейтингом 4.9 потрапило до рейтингу у 2010 та 2011 роках (використовуйте | або функцію isin)?
num_books_rating_4_9 = ((df['user_rating'] == 4.9) & (df['year'].isin([2010, 2011]))).sum()
print("Скільки книг з рейтингом 4.9 потрапило до рейтингу у 2010 та 2011 роках? Відповідь:", num_books_rating_4_9)

# І насамкінець, давайте відсортуємо за зростанням ціни всі книги, які потрапили до рейтингу в 2015 році і коштують дешевше за 8 доларів (використовуйте функцію sort_values).
sorted_books = df[(df['year'] == 2015) & (df['price'] < 8)].sort_values(by='price')

# Вивести відсортований DataFrame
from IPython.display import display
display(sorted_books)

# Відповідь: Яка книга остання у відсортованому списку?
last_book = sorted_books.iloc[-1]

print("Відповідь: Яка книга остання у відсортованому списку?")
print(last_book)

# Для початку давайте подивимося на максимальну та мінімальну ціни для кожного з жанрів (використовуйте функції groupby та agg, для підрахунку мінімальних та максимальних значень використовуйте max та min).
for genre in genre_price_stats.index:
    max_price = genre_price_stats.loc[genre, 'max']
    min_price = genre_price_stats.loc[genre, 'min']
    print(f"Максимальна ціна для жанру {genre}? Відповідь: {max_price}")
    print(f"Мінімальна ціна для жанру {genre}? Відповідь: {min_price}")

# Тепер створіть новий датафрейм, який вміщатиме кількість книг для кожного з авторів (використовуйте функції groupby та agg, для підрахунку кількості використовуйте count).
# Створення нового датафрейму з кількістю книг для кожного автора
author_books_count = df.groupby('author')['name'].count().reset_index()

# Перейменування стовпців для зручності
author_books_count.columns = ['author', 'book_count']

# Виведення розмірності таблиці
print("Якої розмірності вийшла таблиця? Відповідь:", author_books_count.shape)

# Знаходження автора з найбільшою кількістю книг
author_with_most_books = author_books_count.loc[author_books_count['book_count'].idxmax()]

# Виведення автора з найбільшою кількістю книг та його кількості книг
print("Який автор має найбільше книг? Відповідь:", author_with_most_books['author'])
print("Скільки книг цього автора? Відповідь:", author_with_most_books['book_count'])

# Тепер створіть другий датафрейм, який буде вміщати середній рейтинг для кожного автора (використовуйте функції groupby та agg, для підрахунку середнього значення використовуйте mean).
author_avg_rating = df.groupby('author')['user_rating'].mean().reset_index()

# Перейменування стовпців для зручності
author_avg_rating.columns = ['author', 'avg_rating']

# Виведення результатів
min_avg_rating_author = author_avg_rating.loc[author_avg_rating['avg_rating'].idxmin()]
print("У якого автора середній рейтинг мінімальний? Відповідь:", min_avg_rating_author['author'])
print("Який у цього автора середній рейтинг? Відповідь:", min_avg_rating_author['avg_rating'])

# З'єднайте останні два датафрейми так, щоб для кожного автора було видно кількість книг та середній рейтинг (Використовуйте функцію concat з параметром axis=1). Збережіть результат у змінну
author_stats = pd.concat([author_books_count.set_index('author'), author_avg_rating.set_index('author')], axis=1)

# Відновлення індексу
author_stats = author_stats.reset_index()

# Перейменування стовпців
author_stats.columns = ['author', 'book_count', 'avg_rating']

# Відсортуйте датафрейм за зростаючою кількістю книг та зростаючим рейтингом (використовуйте функцію sort_values)
author_stats_sorted = author_stats.sort_values(by=['book_count', 'avg_rating'])
print(author_stats_sorted.head())

# Виведення результату
print("Який автор перший у списку? Відповідь:", author_stats_sorted['author'].iloc[0])

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Зчитуємо дані з CSV файлу
df = pd.read_csv('bestsellers with categories.csv')

# Побудова гістограми розподілу кількості книг за рік
plt.figure(figsize=(10, 6))
df['Year'].hist(bins=10, color='skyblue', edgecolor='black')
plt.title('Розподіл кількості книг за рік')
plt.xlabel('Рік')
plt.ylabel('Кількість книг')
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Зчитуємо дані з CSV файлу
df = pd.read_csv('bestsellers with categories.csv')

# Побудова графіку розподілу ціни книг
plt.figure(figsize=(10, 6))
plt.hist(df['Price'], bins=30, color='orange', edgecolor='black')
plt.title('Розподіл ціни книг')
plt.xlabel('Ціна')
plt.ylabel('Кількість книг')
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Зчитуємо дані з CSV файлу
df = pd.read_csv('bestsellers with categories.csv')

# Побудова графіку розподілу кількості відгуків та рейтингу
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='Reviews', y='User Rating', hue='Genre', palette='coolwarm')
plt.title('Розподіл кількості відгуків та рейтингу')
plt.xlabel('Кількість відгуків')
plt.ylabel('Рейтинг')
plt.grid(True)
plt.legend([], [], frameon=False)
plt.show()